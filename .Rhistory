remotes::install_github("anthonynorth/rscodeio")
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
rscodeio::install_theme()
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
rscodeio::install_theme()
rscodeio::install_theme()
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
install.packages("remotes", force=T)
install.packages("remotes", force = T)
remotes::install_github("anthonynorth/rscodeio")
remotes::install_github("anthonynorth/rscodeio", force=T)
rscodeio::install_theme()
install.packages("tidyverse")
rscodeio::activate_menu_theme
rscodeio::activate_menu_theme()
rscodeio::uninstall_theme()
# libs
library(fpp)
library(stats)
library(xts)
library(ggplot2)
library(forecast)
# load data
df <- read.csv("./dataset.csv")
getwd()
setwd
setwd("./Github/R-ile-Zaman-Serileri-Analizi/Carpimsal_Ayristirma/")
# libs
library(fpp)
library(stats)
library(xts)
library(ggplot2)
library(forecast)
# load data
df <- read.csv("../Toplamsal_Ayristirma/dataset.csv")
names(df) <- c("date", "electric")
head(df);tail(df)
# tarih-saat belirleme
df[,1] <- as.POSIXct(df[,1], format = "%Y-%m-%d %H:%M:%S")
df_xts <- as.xts(df[,-1], order.by = df[,1])
class(df_xts) ; head(df_xts)
#periyodu 18 olan zaman serisi
df_ts <- ts(df_xts[1:144], frequency = 18)
# trent bileşeni
df_trent <- tslm(df_ts ~ trend)
df_trent
# trent bileşeni
df_trent <- tslm(df_ts ~ trend)
df_trent
# load data
df <- read.csv("../Toplamsal_Ayristirma/dataset.csv")
names(df) <- c("date", "electric")
head(df);tail(df)
df
#germe sayısı s = 18 olan merkezsel hareketli ortalama işlemi seriye uygulanır
MHO <- ma(df_ts, order = 18, centre = TRUE)
mevsimsel_bilesen <- df_ts/MHO
mevsimsel_bilesen
df_ts
MHO
1525172399/355.55556
mevsimsel_bilesen <- df_ts/MHO
mevsimsel_bilesen
1525172399/355.55556
myDF<- [5,10,15]
myDF<- c(5,10,15)
myDF
myDF/5
myDF2 <- c(5,2,3)
myDF/myDF2
MHO
df_ts
mevsimsel_bilesen <- df/MHO
mevsimsel_bilesen <- df$electric/MHO
df$electric
MHO
mevsimsel_bilesen <- df_ts/MHO
mevsimsel_bilesen
df$electric
df$electric[10]
df$electric[10]/MHO[10]
df$electric[10]/MHO[10]
df$electric[11]/MHO[11]
mevsimsel_bilesen[10]
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort
mevsimsel_bilesen
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 8, ncol=18))
donemort
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort
colMeans(donemort, na.rm = T)
donemort <- colMeans(donemort, na.rm = T)
donemort
donemort_son <- mean(donemort)
donemort_son
donemort/donemort_son
donemort_son <- mean(colMeans(donemort, na.rm = T))
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort_son <- mean(colMeans(donemort, na.rm = T))
donemort_son
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort <- colMeans(donemort, na.rm = T)
donemort_son <- mean(donemort)
donemort
donemort_son
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 8, ncol=18))
donemort <- colMeans(donemort, na.rm = T)
donemort_son <- mean(donemort)
donemort
donemort_son
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort <- colMeans(donemort, na.rm = T)
donemort_son <- mean(donemort)
donemort/donemort_son
donemort_son
#hata terimini yok edebilmek amacıyla her periyottaki ortalama değer hesaplanır.
donemort <- t(matrix(data=mevsimsel_bilesen, nrow = 18, ncol=8))
donemort
donemort <- colMeans(donemort, na.rm = T)
donemort
mean(donemort)
mean(donemort/donemort_son)
mevsimsel_endeks_serisi <- donemort_son
mevsimsel_endeks_serisi
mevsimsel_endeks_serisi <- donemort/donemort_son
mevsimsel_endeks_serisi
df_ts/mevsimsel_endeks_serisi
df_ts
View(df_ts/mevsimsel_endeks_serisi)
mevsimsel_endeks_serisi
df_ts[>]
df_ts[1]
df_ts[1]/mevsimsel_endeks_serisi[1]
trent_serisi[is.nan(trent_serisi)] <- 0
trent_serisi <- df_ts/mevsimsel_endeks_serisi
trent_serisi[is.nan(trent_serisi)] <- 0
trent_serisi
trent <- tslm(trent_serisi~trend)
trent_bileseni<- tslm(trent_serisi~trend)
tahmin_serisi <- trent_bileseni * mevsimsel_endeks_serisi
trent_bileseni
trent_bileseni<- tslm(trent_serisi~trend)
trent_bileseni
##nan ları 0 yapalım
trent_serisi[is.nan(trent_serisi)] <- 0
trent_serisi
##https://stackoverflow.com/questions/18142117/how-to-replace-nan-value-with-zero-in-a-huge-data-frame
trent_serisi <- df_ts/mevsimsel_endeks_serisi
##nan ları 0 yapalım
trent_serisi[is.nan(trent_serisi)] <- 0
trent_bileseni<- tslm(trent_serisi~trend)
View(trent_bileseni)
tahmin_serisi <- trent_bileseni$fitted.values * mevsimsel_endeks_serisi
tahmin_serisi
hata <- df_ts - tahmin_serisi
#HATA Serisinin Analizi
#Hata serisi akgürültü olmalıdır.
?Acf
#HATA Serisinin Analizi
#Hata serisi akgürültü olmalıdır.
View(hata)
Acf(hata, lag.max = 42, lwd=3)
Pacf(hata, lag.max = 42, lwd=3)
Acf(hata, lag.max = 42, lwd=3)
Pacf(hata, lag.max = 42, lwd=3)
Acf(hata, lag.max = 42, lwd=3, ylim=c(-1,1))
Pacf(hata, lag.max = 42, lwd=3, ylim=c(-1,1))
Acf(hata, lag.max = 42, lwd=3, ylim=c(-1,1))
df_ts
df_ts[1] - tahmin_serisi[1]
tahmin_serisi[1]
df_ts[1]
df_ts[10] - tahmin_serisi[10]
Box.test(hata, lag = 10, type = "Ljung-Box")
getwd()
setwd(../)
setwd("../")
getwd()
##https://rpubs.com/Linh-LTP/648937
# load data
df <- read.csv("./Toplamsal_Ayristirma/dataset.csv")
names(df) <- c("date", "electric")
View(data)
# tarih-saat belirleme
df[,1] <- as.POSIXct(df[,1], format = "%Y-%m-%d %H:%M:%S")
df_xts <- as.xts(df[,-1], order.by = df[,1])
class(df_xts) ; head(df_xts)
#periyodu 18 olan zaman serisi
df_ts <- ts(df_xts[1:144], frequency = 18)
#zaman serisi grafiği
plot.ts(df_ts)
df_ts[is.nan(df_ts)] <- 0
df_ts <- log(df_ts)
#periyodu 18 olan zaman serisi
df_ts <- ts(df_xts[1:144], frequency = 18)
#zaman serisi grafiği
plot.ts(df_ts)
df_ts[is.nan(df_ts)] <- 0
df_timeseriescomponents <- decompose(df_ts)
df_ts <- log(df_ts)
plot(df_timeseriescomponents)
df_ts
View(df_ts)
#Mevsimsellikten arındırılmış hali
df_timeseriesseasonallyadjusted <- df_ts - df_timeseriescomponents$seasonal
plot(df_timeseriesseasonallyadjusted)
##https://rpubs.com/Linh-LTP/648937
# load data
df <- read.csv("./Toplamsal_Ayristirma/dataset.csv")
names(df) <- c("date", "electric")
# tarih-saat belirleme
df[,1] <- as.POSIXct(df[,1], format = "%Y-%m-%d %H:%M:%S")
df_xts <- as.xts(df[,-1], order.by = df[,1])
class(df_xts) ; head(df_xts)
#periyodu 18 olan zaman serisi
df_ts <- ts(df_xts[1:144], frequency = 18)
#zaman serisi grafiği
plot.ts(df_ts)
df_ts[is.nan(df_ts)] <- 0
df_timeseriescomponents <- decompose(df_ts)
plot(df_timeseriescomponents)
View(df_ts)
#Mevsimsellikten arındırılmış hali
df_timeseriesseasonallyadjusted <- df_ts - df_timeseriescomponents$seasonal
#Mevsimsellikten arındırılmış hali
df_timeseriesseasonallyadjusted <- df_ts - df_timeseriescomponents$seasonal
plot(df_timeseriesseasonallyadjusted)
df_ts <- log(df_ts)
df_timeseriesforecasts <- HoltWinters(df_ts, beta=FALSE, gamma=FALSE)
df_ts
plot(df_timeseriesseasonallyadjusted)
df_ts <- log(df_ts)
df_ts[which(!is.finite(df_ts))] <- 0
df_ts
df_timeseriesforecasts <- HoltWinters(df_ts, beta=FALSE, gamma=FALSE)
df_timeseriesforecasts
df_timeseriesforecasts$SSE
plot(df_timeseriesforecasts)
df_timeseriesforecasts2 <-
forecast:::forecast.HoltWinters(df_timeseriesforecasts, h=48)
forecast:::plot.forecast(df_timeseriesforecasts2)
